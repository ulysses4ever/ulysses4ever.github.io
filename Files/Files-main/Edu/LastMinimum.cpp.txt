#include <vector>
#include <algorithm>
#include <functional>
#include <iostream>
#include <iterator>
#include <cassert>
#include <cstdlib>

using namespace std;

int main() {
	long arr[] = {4, 1, 3, 1, 4, 2, 6};
	short arrLength(sizeof(arr)/sizeof(*arr));
	assert(arrLength > 0);
	vector<long> vec(arr, arr + arrLength);
	vector<int> lessThenPrevious(arrLength),
					lessThenFollowing(arrLength),
					minimums(arrLength);
	
	lessThenPrevious[0] = lessThenFollowing[lessThenFollowing.size()-1] = 1;
	transform(++vec.begin(), vec.end(),
				vec.begin(),
				++lessThenPrevious.begin(),
				std::less<int>());
	transform(vec.begin(), --vec.end(),
				++vec.begin(),
				lessThenFollowing.begin(),
				std::less<int>());
	transform(lessThenPrevious.begin(), lessThenPrevious.end(),
				lessThenFollowing.begin(),
				minimums.begin(),
				multiplies<short>());

				vector<int>::reverse_iterator lastMinPosIt = find(minimums.rbegin(), minimums.rend(), 1);
	int lastMinPos = minimums.rend() - lastMinPosIt - 1; // 0-based pos; -1 if there wasn't any minimum
	
	//copy(minimums.begin(), minimums.end(), ostream_iterator<int>(cout, " "));
	//cout << endl << lastMinPos << endl;

	system("pause");
}