<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html dir="ltr" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" lang="en"><head>


<title>x86 calling conventions - Wikipedia, the free encyclopedia</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta name="generator" content="MediaWiki 1.16alpha-wmf">
<link rel="alternate" type="application/x-wiki" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit">
<link rel="edit" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit">
<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png">
<link rel="shortcut icon" href="http://en.wikipedia.org/favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="http://en.wikipedia.org/w/opensearch_desc.php" title="Wikipedia (en)">
<link rel="copyright" href="http://creativecommons.org/licenses/by-sa/3.0/">
<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="http://en.wikipedia.org/w/index.php?title=Special:RecentChanges&amp;feed=rss">
<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="http://en.wikipedia.org/w/index.php?title=Special:RecentChanges&amp;feed=atom">
<link rel="stylesheet" href="X86_calling_conventions_files/shared.css" type="text/css" media="screen">
<link rel="stylesheet" href="X86_calling_conventions_files/commonPrint.css" type="text/css" media="print">
<link rel="stylesheet" href="X86_calling_conventions_files/main.css" type="text/css" media="screen">
<link rel="stylesheet" href="X86_calling_conventions_files/main_002.css" type="text/css" media="handheld">
<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?243z2" type="text/css" media="screen" /><![endif]-->
<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?243z2" type="text/css" media="screen" /><![endif]-->
<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?243z2" type="text/css" media="screen" /><![endif]-->
<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?243z2" type="text/css" media="screen" /><![endif]-->
<link rel="stylesheet" href="X86_calling_conventions_files/index_003.css" type="text/css" media="all">
<link rel="stylesheet" href="X86_calling_conventions_files/index_005.css" type="text/css" media="print">
<link rel="stylesheet" href="X86_calling_conventions_files/index_002.css" type="text/css" media="handheld">
<link rel="stylesheet" href="X86_calling_conventions_files/index_004.css" type="text/css" media="all">
<link rel="stylesheet" href="X86_calling_conventions_files/index.css" type="text/css" media="all">
<script type="text/javascript">
var skin="monobook",
stylepath="/skins-1.5",
wgArticlePath="/wiki/$1",
wgScriptPath="/w",
wgScriptExtension=".php",
wgScript="/w/index.php",
wgVariantArticlePath=false,
wgActionPaths={},
wgServer="http://en.wikipedia.org",
wgCanonicalNamespace="",
wgCanonicalSpecialPageName=false,
wgNamespaceNumber=0,
wgPageName="X86_calling_conventions",
wgTitle="X86 calling conventions",
wgAction="view",
wgArticleId=6817415,
wgIsArticle=true,
wgUserName=null,
wgUserGroups=null,
wgUserLanguage="en",
wgContentLanguage="en",
wgBreakFrames=false,
wgCurRevisionId=318607346,
wgVersion="1.16alpha-wmf",
wgEnableAPI=true,
wgEnableWriteAPI=true,
wgSeparatorTransformTable=["", ""],
wgDigitTransformTable=["", ""],
wgMainPageTitle="Main Page",
wgFormattedNamespaces={"-2": "Media", "-1": "Special", "0": "", "1": "Talk", "2": "User", "3": "User talk", "4": "Wikipedia", "5": "Wikipedia talk", "6": "File", "7": "File talk", "8": "MediaWiki", "9": "MediaWiki talk", "10": "Template", "11": "Template talk", "12": "Help", "13": "Help talk", "14": "Category", "15": "Category talk", "100": "Portal", "101": "Portal talk"},
wgNamespaceIds={"media": -2, "special": -1, "": 0, "talk": 1, "user": 2, "user_talk": 3, "wikipedia": 4, "wikipedia_talk": 5, "file": 6, "file_talk": 7, "mediawiki": 8, "mediawiki_talk": 9, "template": 10, "template_talk": 11, "help": 12, "help_talk": 13, "category": 14, "category_talk": 15, "portal": 100, "portal_talk": 101, "wp": 4, "wt": 5, "image": 6, "image_talk": 7},
wgMWSuggestTemplate="http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest",
wgDBname="enwiki",
wgSearchNamespaces=[0],
wgMWSuggestMessages=["with suggestions", "no suggestions"],
wgRestrictionEdit=[],
wgRestrictionMove=[],
wgNotice="",
wgNoticeLocal="";
</script>
<script src="X86_calling_conventions_files/wikibits.js" type="text/javascript"></script>
<script src="X86_calling_conventions_files/ajax.js" type="text/javascript"></script>
<script src="X86_calling_conventions_files/mwsuggest.js" type="text/javascript"></script>
<script type="text/javascript" src="X86_calling_conventions_files/centralnotice.js"></script><style type="text/css">
#centralNotice .siteNoticeSmall{display:none;}
#centralNotice .siteNoticeSmallAnon{display:none;}
#centralNotice .siteNoticeSmallUser{display:none;}
#centralNotice.collapsed .siteNoticeBig{display:none;}
#centralNotice.collapsed .siteNoticeSmall{display:block;}
#centralNotice.collapsed .siteNoticeSmallUser{display:block;}
#centralNotice.collapsed .siteNoticeSmallAnon{display:block;}
#centralNotice.anonnotice .siteNoticeSmallUser{display:none !important;}
#centralNotice.usernotice .siteNoticeSmallAnon{display:none !important;}
</style>


<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?243z2"></script>
	<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
<script src="X86_calling_conventions_files/index.php" type="text/javascript"></script><script type="text/javascript" src="X86_calling_conventions_files/index_002.php"></script>

<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #b1b100;}
.c.source-c .kw2 {color: #000000; font-weight: bold;}
.c.source-c .kw3 {color: #000066;}
.c.source-c .kw4 {color: #993333;}
.c.source-c .co1 {color: #666666; font-style: italic;}
.c.source-c .co2 {color: #339933;}
.c.source-c .coMULTI {color: #808080; font-style: italic;}
.c.source-c .es0 {color: #000099; font-weight: bold;}
.c.source-c .es1 {color: #000099; font-weight: bold;}
.c.source-c .es2 {color: #660099; font-weight: bold;}
.c.source-c .es3 {color: #660099; font-weight: bold;}
.c.source-c .es4 {color: #660099; font-weight: bold;}
.c.source-c .es5 {color: #006699; font-weight: bold;}
.c.source-c .br0 {color: #009900;}
.c.source-c .sy0 {color: #339933;}
.c.source-c .st0 {color: #ff0000;}
.c.source-c .nu0 {color: #0000dd;}
.c.source-c .nu6 {color: #208080;}
.c.source-c .nu8 {color: #208080;}
.c.source-c .nu12 {color: #208080;}
.c.source-c .nu16 {color:#800080;}
.c.source-c .nu17 {color:#800080;}
.c.source-c .nu18 {color:#800080;}
.c.source-c .nu19 {color:#800080;}
.c.source-c .me1 {color: #202020;}
.c.source-c .me2 {color: #202020;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-asm {line-height: normal;}
.source-asm li, .source-asm pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for asm
 * CSS class: source-asm, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.asm.source-asm .de1, .asm.source-asm .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.asm.source-asm  {font-family:monospace;}
.asm.source-asm .imp {font-weight: bold; color: red;}
.asm.source-asm li, .asm.source-asm .li1 {font-weight: normal; vertical-align:top;}
.asm.source-asm .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.asm.source-asm .li2 {font-weight: bold; vertical-align:top;}
.asm.source-asm .kw1 {color: #00007f; font-weight: bold;}
.asm.source-asm .kw2 {color: #0000ff; font-weight: bold;}
.asm.source-asm .kw3 {color: #00007f;}
.asm.source-asm .kw4 {color: #000000; font-weight: bold;}
.asm.source-asm .kw5 {color: #000000; font-weight: bold;}
.asm.source-asm .co1 {color: #666666; font-style: italic;}
.asm.source-asm .co2 {color: #adadad; font-style: italic;}
.asm.source-asm .es0 {color: #000099; font-weight: bold;}
.asm.source-asm .br0 {color: #009900; font-weight: bold;}
.asm.source-asm .sy0 {color: #339933;}
.asm.source-asm .st0 {color: #7f007f;}
.asm.source-asm .nu0 {color: #0000ff;}
.asm.source-asm .ln-xtra, .asm.source-asm li.ln-xtra, .asm.source-asm div.ln-xtra {background-color: #ffc;}
.asm.source-asm span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-pascal {line-height: normal;}
.source-pascal li, .source-pascal pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for pascal
 * CSS class: source-pascal, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.pascal.source-pascal .de1, .pascal.source-pascal .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.pascal.source-pascal  {font-family:monospace;}
.pascal.source-pascal .imp {font-weight: bold; color: red;}
.pascal.source-pascal li, .pascal.source-pascal .li1 {font-weight: normal; vertical-align:top;}
.pascal.source-pascal .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.pascal.source-pascal .li2 {font-weight: bold; vertical-align:top;}
.pascal.source-pascal .kw1 {color: #000000; font-weight: bold;}
.pascal.source-pascal .kw2 {color: #000000; font-weight: bold;}
.pascal.source-pascal .kw3 {color: #000066;}
.pascal.source-pascal .kw4 {color: #000066; font-weight: bold;}
.pascal.source-pascal .co1 {color: #666666; font-style: italic;}
.pascal.source-pascal .coMULTI {color: #666666; font-style: italic;}
.pascal.source-pascal .es0 {color: #000099; font-weight: bold;}
.pascal.source-pascal .es_h {color: #000099; font-weight: bold;}
.pascal.source-pascal .br0 {color: #009900;}
.pascal.source-pascal .sy0 {color: #339933;}
.pascal.source-pascal .st0 {color: #ff0000;}
.pascal.source-pascal .st_h {color: #ff0000;}
.pascal.source-pascal .nu0 {color: #cc66cc;}
.pascal.source-pascal .me1 {color: #0066ee;}
.pascal.source-pascal .ln-xtra, .pascal.source-pascal li.ln-xtra, .pascal.source-pascal div.ln-xtra {background-color: #ffc;}
.pascal.source-pascal span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css"> .siteNoticeBig .notice-thermometer-fill { width: 81px; } .siteNoticeBig .notice-thermometer-base { width: 325px; }</style><style type="text/css">#bodyContent { position:relative; } 
.topicon { position:absolute; top:-2em !important;}
#coordinates{ position:absolute; top:1px !important; }</style></head><body class="mediawiki ltr ns-0 ns-subject page-X86_calling_conventions skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a id="top"></a>
		<div id="siteNotice"><script type="text/javascript">if (wgNotice != '') document.writeln(wgNotice);</script><div id="centralNotice" class="expanded anonnotice"><style type="text/css">
/* Styles for Notices */
.notice-all a {
 text-decoration: none;
}
.notice-all a:hover span {
 text-decoration: underline;
}
div.notice-all div, div.notice-all span {
 margin: 0 !important;
}
.notice-pitch {
 display: inline-block;
 background-color: transparent;
 margin: 1.15em 0em;
}
.notice-pitch-text {
 float: left;
 overflow: visible;
 font-family: sans-serif;
 font-size: 1em;
 line-height: 1.5em;
 padding: 0.75em !important;
 cursor: pointer;
}
.notice-pitch-text-big {
 font-size: 1.5em;
}
.notice-slogan {
 color: #6E98C2;
 font-weight: bold;
 padding-right: 1em;
}
.siteNoticeBig {
 position: relative;
 float: left;
 width: 100%;
 border: solid 1px silver;
 background-color: #f3f3f3;
 margin-bottom: 1em;
}
 .siteNoticeBig .notice-toggle {
  position: absolute;
  top: 0em;
  right: 0.5em;
  font-size: 0.75em;
 }
 .siteNoticeBig .notice-button {
  position: absolute;
  bottom: 0.5em;
  right: 0.5em;
  height: 28px;
  text-align: center;
  background-color: transparent;
 }
 .siteNoticeBig .notice-button-start {
  float: left;
  background-image: url(http://upload.wikimedia.org/centralnotice/images/2009/button.png);
  background-position: left top;
  width: 12px;
  height: 28px;
 }
 .siteNoticeBig .notice-button-end {
  float: left;
  background-image: url(http://upload.wikimedia.org/centralnotice/images/2009/button.png);
  background-position: right bottom;
  width: 12px;
  height: 28px;
 }
 .siteNoticeBig .notice-button a {
  float: left;
  background-image: url(http://upload.wikimedia.org/centralnotice/images/2009/button.png);
  background-position: center center;
  background-repeat: repeat-x;
  font-family: sans-serif;
  font-size: 1em;
  font-weight: bold;
  color: white;
  line-height: 28px;
  height: 28px;
 }
 .siteNoticeBig .notice-thermometer {
  height: 21px;
  width: 450px;
  margin-top: 0.75em !important;
 }
 .siteNoticeBig .notice-thermometer-start {
  float: left;
  background-image: url(http://upload.wikimedia.org/centralnotice/images/2009/thermometer.png);
  background-position: left top;
  width: 10px;
  height: 21px;
 }
 .siteNoticeBig .notice-thermometer-fill {
  float: left;
  background-image: url(http://upload.wikimedia.org/centralnotice/images/2009/thermometer.png);
  background-position: left -21px;
  height: 21px;
  color: white;
  font-weight: bold;
  text-align: right;
  line-height: 21px;
  overflow: hidden;
 }
 .siteNoticeBig .notice-thermometer-transition {
  float: left;
  background-image: url(http://upload.wikimedia.org/centralnotice/images/2009/thermometer-transition.png);
  height: 21px;
  width: 24px;
 }
 .siteNoticeBig .notice-thermometer-base {
  float: left;
  background-image: url(http://upload.wikimedia.org/centralnotice/images/2009/thermometer.png);
  background-position: left 42px;
  height: 21px;
  color: #3474b5;
  font-weight: bold;
  text-align: right;
  line-height: 21px;
  overflow: hidden;
 }
 .siteNoticeBig .notice-thermometer-end {
  float: left;
  background-image: url(http://upload.wikimedia.org/centralnotice/images/2009/thermometer.png);
  background-position: right bottom;
  width: 10px;
  height: 21px;
 }

.siteNoticeSmallAnon {
 position: relative;
 float: left;
 width: 100%;
 border: solid 1px silver;
 background-color: #f3f3f3;
 text-align: center;
 padding: 0.1em 0;
 margin-bottom: 1em;
}
 .siteNoticeSmallAnon .notice-toggle {
  float: right;
  font-size: 0.75em;
  padding-right: 0.5em;
 }
 .siteNoticeSmallAnon .notice-slogan {
  padding-left: 0.5em;
 }
.siteNoticeSmallUser {
 position: relative;
 float: left;
 width: 100%;
 text-align: center;
 margin-bottom: 1em;
}
 .siteNoticeSmallUser .notice-toggle {
  float: right;
  font-size: 0.75em;
 }

</style>
<script>
/* @param mode string to be appended to the utm_source paramter like "utm_source=[notice]_[mode]" */
function goToDonationPage( mode ) {
 var url = 'http://meta.wikimedia.org/wiki/Special:GeoLite?lang=en&&utm_medium=sitenotice&utm_campaign=fundraiser2009&utm_source=2009_Notice30';
 if ( mode && mode.length ) { 
  url += '_' + mode;
 }
 var targets = String( 'Support_Wikipedia2' ).split(',');
 if ( targets.length ) {
  url += '&target=' + targets[Math.floor( Math.random() * targets.length )].replace(/^\s+|\s+$/, '');
 }
 window.location = url;
}
// Set thermometer sizes
var maxPixels = 406;
var range = parseInt( '7500000' );
var value = parseInt( '1500000' );
var fill = parseInt( maxPixels * ( ( 1 / range ) * value ) );
var base = maxPixels - fill;
appendCSS('\
 .siteNoticeBig .notice-thermometer-fill { width: ' + fill + 'px; }\
 .siteNoticeBig .notice-thermometer-base { width: ' + base + 'px; }\
');
</script>
<div class="notice-all siteNoticeBig" align="center">
 <a class="notice-pitch" href="javascript:goToDonationPage()">
  <div class="notice-pitch-text">
   <span class="notice-pitch-text-big">Wikipedia is there when you need it — now it needs you.</span>
   <div class="notice-thermometer">
    <div class="notice-thermometer-start"></div>
    <div class="notice-thermometer-fill">$0.9M USD</div>
    <div class="notice-thermometer-transition"></div>
    <div class="notice-thermometer-base">$7.5M USD</div>
    <div class="notice-thermometer-end"></div>
    <div style="clear: both;"></div>
   </div>
  </div>
  <div style="clear: both;"></div>
 </a>
 <div class="notice-button"><div class="notice-button-start"></div><a href="javascript:goToDonationPage()">Donate Now</a><div class="notice-button-end"></div></div>
 <div class="notice-toggle">[<a href="#" onclick="toggleNotice();return false"><span>Hide</span></a>]</div>
 <div style="clear: both;"></div>
</div>
<div class="notice-all siteNoticeSmallAnon">
 <div class="notice-toggle">[<a href="#" onclick="toggleNotice()"><span>Show</span></a>]</div>
 <a class="notice-slogan" href="javascript:goToDonationPage('collapsed')">
  <span>Wikipedia</span>
  <img src="X86_calling_conventions_files/Wikipedia-logo-small_Fundraising_2009.png" alt="">
  <span>Forever</span>
 </a>
 <span>Our shared knowledge. Our shared treasure.</span>
 <a href="javascript:goToDonationPage('collapsed')">
  <span>Help us protect it.</span>
 </a>
 <div style="clear: both;"></div>
</div>
<div class="notice-all siteNoticeSmallUser">
 <div class="notice-toggle">[<a href="#" onclick="toggleNotice()"><span>Show</span></a>]</div>
 <a class="notice-slogan" href="javascript:goToDonationPage('collapsed')">
  <span>Wikipedia</span>
  <img src="X86_calling_conventions_files/Wikipedia-logo-small_Fundraising_2009.png" alt="">
  <span>Forever</span>
 </a>
 <span>Our shared knowledge. Our shared treasure.</span>
 <a href="javascript:goToDonationPage('collapsed')">
  <span>Help us protect it.</span>
 </a>
 <div style="clear: both;"></div>
</div>
<div style="clear: both;"></div></div>
</div>		<h1 id="firstHeading" class="firstHeading">x86 calling conventions</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>This article describes, in <a href="http://en.wikipedia.org/wiki/Computing" title="Computing">computing</a>, the <a href="http://en.wikipedia.org/wiki/Calling_convention" title="Calling convention">calling conventions</a> used on the <a href="http://en.wikipedia.org/wiki/X86" title="X86">x86</a> architecture.</p>
<p>Calling conventions describe the interface of called code:</p>
<ul>
<li>The order in which parameters are allocated</li>
<li>Where parameters are placed (pushed on the stack or placed in registers)</li>
<li>Which registers may be used by the function</li>
<li>Whether the caller or the callee is responsible for unwinding the stack on return</li>
</ul>
<p>A closely related topic is <a href="http://en.wikipedia.org/wiki/Name_mangling" title="Name mangling">name mangling</a>, which determines how symbol names in the code map to symbol names used by the linker.</p>
<p>There are often subtle differences in how various compilers
implement these conventions, so it is often difficult to interface code
which is compiled by different compilers. On the other hand,
conventions which are used as an API standard (like stdcall) are
necessarily very uniformly implemented.</p>
<table id="toc" class="toc">
<tbody><tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
 <span class="toctoggle">[<a href="javascript:toggleToc()" class="internal" id="togglelink">hide</a>]</span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Historical_background"><span class="tocnumber">1</span> <span class="toctext">Historical background</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Caller_clean-up"><span class="tocnumber">2</span> <span class="toctext">Caller clean-up</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="#cdecl"><span class="tocnumber">2.1</span> <span class="toctext">cdecl</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#syscall"><span class="tocnumber">2.2</span> <span class="toctext">syscall</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#optlink"><span class="tocnumber">2.3</span> <span class="toctext">optlink</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-6"><a href="#Callee_clean-up"><span class="tocnumber">3</span> <span class="toctext">Callee clean-up</span></a>
<ul>
<li class="toclevel-2 tocsection-7"><a href="#pascal"><span class="tocnumber">3.1</span> <span class="toctext">pascal</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#register"><span class="tocnumber">3.2</span> <span class="toctext">register</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="#stdcall"><span class="tocnumber">3.3</span> <span class="toctext">stdcall</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#fastcall"><span class="tocnumber">3.4</span> <span class="toctext">fastcall</span></a>
<ul>
<li class="toclevel-3 tocsection-11"><a href="#Microsoft_fastcall"><span class="tocnumber">3.4.1</span> <span class="toctext">Microsoft fastcall</span></a></li>
<li class="toclevel-3 tocsection-12"><a href="#Borland_fastcall"><span class="tocnumber">3.4.2</span> <span class="toctext">Borland fastcall</span></a></li>
<li class="toclevel-3 tocsection-13"><a href="#Watcom_register_based_calling_convention"><span class="tocnumber">3.4.3</span> <span class="toctext">Watcom register based calling convention</span></a></li>
<li class="toclevel-3 tocsection-14"><a href="#TopSpeed_.2F_Clarion_.2F_JPI"><span class="tocnumber">3.4.4</span> <span class="toctext">TopSpeed / Clarion / JPI</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-15"><a href="#safecall"><span class="tocnumber">3.5</span> <span class="toctext">safecall</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-16"><a href="#Either_caller_or_callee_clean-up"><span class="tocnumber">4</span> <span class="toctext">Either caller or callee clean-up</span></a>
<ul>
<li class="toclevel-2 tocsection-17"><a href="#thiscall"><span class="tocnumber">4.1</span> <span class="toctext">thiscall</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-18"><a href="#Intel_ABI"><span class="tocnumber">5</span> <span class="toctext">Intel ABI</span></a></li>
<li class="toclevel-1 tocsection-19"><a href="#Microsoft_x64_calling_convention"><span class="tocnumber">6</span> <span class="toctext">Microsoft x64 calling convention</span></a></li>
<li class="toclevel-1 tocsection-20"><a href="#AMD64_ABI_convention"><span class="tocnumber">7</span> <span class="toctext">AMD64 ABI convention</span></a></li>
<li class="toclevel-1 tocsection-21"><a href="#Standard_exit_and_entry_sequences_for_C_code"><span class="tocnumber">8</span> <span class="toctext">Standard exit and entry sequences for C code</span></a></li>
<li class="toclevel-1 tocsection-22"><a href="#References"><span class="tocnumber">9</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-23"><a href="#External_links"><span class="tocnumber">10</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</tbody></table>
<script type="text/javascript">
//<![CDATA[
if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<h2><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=1" title="Edit section: Historical background">edit</a>]</span> <span class="mw-headline" id="Historical_background">Historical background</span></h2>
<p>In the times of <a href="http://en.wikipedia.org/wiki/Minicomputer" title="Minicomputer">minicomputers</a>,
the machine manufacturer also used to provide an OS for it and most (if
not all) of the software, including compilers for various languages. So
there used to be only one calling convention per language: the one
implemented by the manufacturer's compilers.</p>
<p>The IBM PC case was totally different. One firm (IBM) provided the
hardware, another (Intel) made the processor, the third (Microsoft) was
responsible for the OS (MS-DOS), and many others wrote compilers for
quite a number of programming languages. Different mutually exclusive
calling schemes were thus designed to satisfy their different
requirements.</p>
<h2><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=2" title="Edit section: Caller clean-up">edit</a>]</span> <span class="mw-headline" id="Caller_clean-up">Caller clean-up</span></h2>
<p>In these conventions the caller cleans the arguments from the stack, which allows for variable argument lists, eg. printf().</p>
<h3><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=3" title="Edit section: cdecl">edit</a>]</span> <span class="mw-headline" id="cdecl">cdecl</span></h3>
<p>The <b>cdecl</b> calling convention is used by many <a href="http://en.wikipedia.org/wiki/C_programming_language" title="C programming language" class="mw-redirect">C</a> systems for the <a href="http://en.wikipedia.org/wiki/X86_architecture" title="X86 architecture" class="mw-redirect">x86 architecture</a>. In cdecl, function parameters are pushed on the <a href="http://en.wikipedia.org/wiki/Call_stack" title="Call stack">stack</a> in a right-to-left order. Function return values are returned in the EAX <a href="http://en.wikipedia.org/wiki/Processor_register" title="Processor register">register</a>
(except for floating point values, which are returned in the x87
register ST0). Registers EAX, ECX, and EDX are available for use in the
function.</p>
<p>For instance, the following C code function prototype and function call:</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;">
<div class="c source-c" style="font-family: monospace;">
<pre class="de1"><span class="kw4">int</span> function_name<span class="br0">(</span><span class="kw4">int</span><span class="sy0">,</span> <span class="kw4">int</span><span class="sy0">,</span> <span class="kw4">int</span><span class="br0">)</span><span class="sy0">;</span>
<span class="kw4">int</span> a<span class="sy0">,</span> b<span class="sy0">,</span> c<span class="sy0">,</span> x<span class="sy0">;</span>
...
<span class="me1">x</span> <span class="sy0">=</span> function_name<span class="br0">(</span>a<span class="sy0">,</span> b<span class="sy0">,</span> c<span class="br0">)</span><span class="sy0">;</span>
</pre></div>
</div>
<p>will produce the following <a href="http://en.wikipedia.org/wiki/X86_assembly_language" title="X86 assembly language">x86 Assembly code</a> (written in <a href="http://en.wikipedia.org/wiki/MASM" title="MASM" class="mw-redirect">MASM</a> syntax, with destination first):</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;">
<div class="asm source-asm" style="font-family: monospace;">
<pre class="de1"><span class="kw1">push</span> <span class="kw5">c</span>
<span class="kw1">push</span> b
<span class="kw1">push</span> a
<span class="kw1">call</span> function_name
<span class="kw1">add</span> <span class="kw3">esp</span><span class="sy0">,</span> <span class="nu0">12</span> <span class="co1">;Stack clearing</span>
<span class="kw1">mov</span> x<span class="sy0">,</span> <span class="kw3">eax</span>
</pre></div>
</div>
<p>The calling function cleans the stack after the function call returns.</p>
<p>There are some variations in the interpretation of cdecl,
particularly in how to return values. As a result, x86 programs
compiled for different operating system platforms and/or by different
compilers can be incompatible, even if they both use the "cdecl"
convention and do not call out to the underlying environment. Some
compilers return simple data structures with the length of 2 registers
or less in EAX:EDX, and larger structures and class objects requiring
special treatment by the exception handler (e.g., a defined
constructor, destructor, or assignment) are returned in memory. To pass
"in memory", the caller allocates memory and passes a pointer to it as
a hidden first parameter; the callee populates the memory and returns
the pointer, popping the hidden pointer when returning.</p>
<p>In Linux/gcc double/floating point values should be pushed on the stack via the <a href="http://en.wikipedia.org/wiki/X87" title="X87">x87</a> pseudo-stack. Like so:</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;">
<div class="asm source-asm" style="font-family: monospace;">
<pre class="de1"><span class="kw1">sub</span> <span class="kw3">esp</span><span class="sy0">,</span><span class="nu0">8</span><span class="co1">;    make room for the double</span>
<span class="kw2">fld</span> <span class="br0">[</span><span class="kw3">ebp</span><span class="sy0">+</span>x<span class="br0">]</span><span class="co1">; load our double onto the floating point stack</span>
<span class="kw2">fstp</span> <span class="br0">[</span><span class="kw3">esp</span><span class="br0">]</span><span class="co1">;  push our double onto the stack</span>
<span class="kw1">call</span> func<span class="co1">;</span>
<span class="kw1">add</span> <span class="kw3">esp</span><span class="sy0">,</span><span class="nu0">8</span><span class="co1">;</span>
</pre></div>
</div>
<p>Using this method ensures it is pushed on the stack in the correct format.</p>
<p>The <b>cdecl</b> calling convention is usually the default calling convention for x86 C <a href="http://en.wikipedia.org/wiki/Compilers" title="Compilers" class="mw-redirect">compilers</a>,
although many compilers provide options to automatically change the
calling conventions used. To manually define a function to be cdecl,
some support the following syntax:</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;">
<div class="c source-c" style="font-family: monospace;">
<pre class="de1"><span class="kw4">void</span> _cdecl function_name<span class="br0">(</span>params<span class="br0">)</span><span class="sy0">;</span>
</pre></div>
</div>
<p>The <b>_cdecl</b> modifier must be included in the function
prototype, and in the function declaration to override any other
settings that might be in place.</p>
<h3><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=4" title="Edit section: syscall">edit</a>]</span> <span class="mw-headline" id="syscall">syscall</span></h3>
<p>This is similar to cdecl in that arguments are pushed right to left.
EAX, ECX, and EDX are not preserved. The size of the parameter list in
doublewords is passed in AL.</p>
<p>Syscall is the standard calling convention for 32 bit <a href="http://en.wikipedia.org/wiki/OS/2" title="OS/2">OS/2</a> API.</p>
<h3><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=5" title="Edit section: optlink">edit</a>]</span> <span class="mw-headline" id="optlink">optlink</span></h3>
<p>Arguments are pushed right to left. The three lexically first
(leftmost) arguments are passed in EAX, EDX, and ECX and up to four
floating-point arguments are passed in ST(0) through ST(3), although
space for them is reserved in the argument list on the stack. Results
are returned in EAX or ST(0). Registers EBP, EBX, ESI, and EDI are
preserved.</p>
<p>Optlink is used by the <a href="http://en.wikipedia.org/wiki/IBM" title="IBM">IBM</a> <a href="http://en.wikipedia.org/wiki/VisualAge" title="VisualAge" class="mw-redirect">VisualAge</a> compilers.</p>
<h2><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=6" title="Edit section: Callee clean-up">edit</a>]</span> <span class="mw-headline" id="Callee_clean-up">Callee clean-up</span></h2>
<p>When the callee cleans the arguments from the stack it needs to be
known at compile time how many bytes the stack needs to be adjusted.
Therefore, these calling conventions are not compatible with variable
argument lists, eg. printf(). They may be, however, slightly more
efficient as the code needed to unwind the stack does not need to be
generated by the calling code.</p>
<p>Functions which utilize these conventions are easy to recognize in
ASM code because they will unwind the stack prior to returning. The x86
<tt>ret</tt> instruction allows an optional byte parameter that
specifies the number of stack locations to unwind before returning to
the caller. Such code looks like this:</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;">
<div class="asm source-asm" style="font-family: monospace;">
<pre class="de1"> <span class="kw1">ret</span> <span class="nu0">12</span>
</pre></div>
</div>
<h3><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=7" title="Edit section: pascal">edit</a>]</span> <span class="mw-headline" id="pascal">pascal</span></h3>
<p>The parameters are pushed on the stack in left-to-right order
(opposite of cdecl), and the callee is responsible for balancing the
stack before return.</p>
<p>This calling convention was common in the following 16 bit APIs: <a href="http://en.wikipedia.org/wiki/OS/2" title="OS/2">OS/2</a> 1.x , <a href="http://en.wikipedia.org/wiki/Microsoft_Windows" title="Microsoft Windows">Microsoft Windows</a> 3.x, and <a href="http://en.wikipedia.org/wiki/Borland_Delphi" title="Borland Delphi" class="mw-redirect">Borland Delphi</a> version 1.x.</p>
<h3><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=8" title="Edit section: register">edit</a>]</span> <span class="mw-headline" id="register">register</span></h3>
<p>An alias for <a href="#Borland_fastcall">Borland fastcall</a>.</p>
<h3><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=9" title="Edit section: stdcall">edit</a>]</span> <span class="mw-headline" id="stdcall">stdcall</span></h3>
<p>The stdcall<a href="http://msdn2.microsoft.com/en-us/library/zxk0tw93%28vs.71%29.aspx" class="external autonumber" rel="nofollow">[1]</a>
calling convention is a variation on the pascal calling convention in
which parameters are passed on the stack, pushed right-to-left.
Registers EAX, ECX, and EDX are designated for use within the function.
Return values are stored in the EAX register. The callee is responsible
for cleanup of the stack.</p>
<p>Stdcall is the standard calling convention for the Microsoft <a href="http://en.wikipedia.org/wiki/Win32" title="Win32" class="mw-redirect">Win32</a> <a href="http://en.wikipedia.org/wiki/API" title="API" class="mw-redirect">API</a> and for Open Watcom C++.</p>
<h3><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=10" title="Edit section: fastcall">edit</a>]</span> <span class="mw-headline" id="fastcall">fastcall</span></h3>
<p>Conventions entitled <b>fastcall</b> have not been standardized, and
have been implemented differently, depending on the compiler vendor.
Typically fastcall calling conventions pass one or more arguments in
registers which reduces the number of memory accesses required for the
call.</p>
<h4><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=11" title="Edit section: Microsoft fastcall">edit</a>]</span> <span class="mw-headline" id="Microsoft_fastcall">Microsoft fastcall</span></h4>
<ul>
<li>Microsoft or GCC <a href="http://www.ohse.de/uwe/articles/gcc-attributes.html#func-fastcall" class="external autonumber" rel="nofollow">[2]</a> <tt>__fastcall</tt><a href="http://msdn2.microsoft.com/en-us/library/Aa271991" class="external autonumber" rel="nofollow">[3]</a> convention (aka <tt>__msfastcall</tt>)
passes the first two arguments (evaluated left to right) that fit into
ECX and EDX. Remaining arguments are pushed onto the stack from right
to left.</li>
</ul>
<h4><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=12" title="Edit section: Borland fastcall">edit</a>]</span> <span class="mw-headline" id="Borland_fastcall">Borland fastcall</span></h4>
<p>Evaluating arguments from left to right, it passes three arguments
via EAX, EDX, ECX. Remaining arguments are pushed onto the stack, also
left to right.</p>
<p>It is the default calling convention of <a href="http://en.wikipedia.org/wiki/Borland_Delphi" title="Borland Delphi" class="mw-redirect">Borland Delphi</a>, where it is known as <i>register</i>.</p>
<h4><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=13" title="Edit section: Watcom register based calling convention">edit</a>]</span> <span class="mw-headline" id="Watcom_register_based_calling_convention">Watcom register based calling convention</span></h4>
<p><a href="http://en.wikipedia.org/wiki/Watcom" title="Watcom">Watcom</a> does not support the <i>__fastcall</i> keyword except to alias it to null. The register calling convention may be selected by command line switch. (However, <a href="http://en.wikipedia.org/wiki/Interactive_Disassembler" title="Interactive Disassembler">IDA</a> uses <i>__fastcall</i> anyway for uniformity)</p>
<p>Up to 4 registers are assigned to arguments in the order eax, edx,
ebx, ecx. Arguments are assigned to registers from left to right. If
any argument cannot be assigned to a register (say it is too large) it,
and all subsequent arguments, are assigned to the stack. Arguments
assigned to the stack are pushed from right to left. Names are mangled
by adding a suffixed underscore.</p>
<p>Variadic functions fall back to the Watcom stack based calling convention.</p>
<p>The Watcom C/C++ compiler also uses the <tt>#pragma aux</tt><a href="http://www.openwatcom.org/index.php/Calling_Conventions#Specifying_Calling_Conventions_the_Watcom_Way" class="external autonumber" rel="nofollow">[4]</a>
directive that allows the user to specify his own calling convention.
As its manual states, "Very few users are likely to need this method,
but if it is needed, it can be a lifesaver".</p>
<h4><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=14" title="Edit section: TopSpeed / Clarion / JPI">edit</a>]</span> <span class="mw-headline" id="TopSpeed_.2F_Clarion_.2F_JPI">TopSpeed / Clarion / JPI</span></h4>
<p>The first four integer parameters are passed in registers eax, ebx,
ecx and edx. Floating point parameters are passed on the floating point
stack – registers st0, st1, st2, st3, st4, st5 and st6. Structure
parameters are always passed on the stack. Additional parameters are
passed on the stack after registers are exhausted. Integer values are
returned in eax, pointers in edx and floating point types in st0.</p>
<h3><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=15" title="Edit section: safecall">edit</a>]</span> <span class="mw-headline" id="safecall">safecall</span></h3>
<p>In <a href="http://en.wikipedia.org/wiki/Borland_Delphi" title="Borland Delphi" class="mw-redirect">Borland Delphi</a> on <a href="http://en.wikipedia.org/wiki/Microsoft_Windows" title="Microsoft Windows">Microsoft Windows</a>, the safecall calling convention encapsulates COM (<a href="http://en.wikipedia.org/wiki/Component_Object_Model" title="Component Object Model">Component Object Model</a>) error handling, so that exceptions aren't leaked out to the caller, but are reported in the <a href="http://en.wikipedia.org/wiki/HRESULT" title="HRESULT">HRESULT</a>
return value, as required by COM/OLE. When calling a safecall function
from Delphi code, Delphi also automatically checks the returned HRESULT
and raises an exception if necessary. Together with language-level
support for COM interfaces and automatic <a href="http://en.wikipedia.org/wiki/IUnknown" title="IUnknown">IUnknown</a>
handling (implicit AddRef/Release/QueryInterface calls), the safecall
calling convention makes COM/OLE programming in Delphi easy and elegant.</p>
<p>The safecall calling convention is the same as the stdcall calling
convention, except that exceptions are passed back to the caller in EAX
as a HResult (instead of in FS:[0]), while the function result is
passed by reference on the stack as though it were a final "out"
parameter. When calling a Delphi function from Delphi this calling
convention will appear just like any other calling convention, because
although exceptions are passed back in EAX, they are automatically
converted back to proper exceptions by the caller. When using COM
objects created in other languages, the HResults will be automatically
raised as exceptions, and the result for Get functions is in the result
rather than a parameter. When creating COM objects in Delphi with
safecall, there is no need to worry about HResults, as exceptions can
be raised as normal but will be seen as HResults in other languages.</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;">
<div class="pascal source-pascal" style="font-family: monospace;">
<pre class="de1"><span class="kw1">function</span> function_name<span class="br0">(</span>a<span class="sy0">:</span> DWORD<span class="br0">)</span><span class="sy0">:</span> DWORD; safecall;
</pre></div>
</div>
<p>Returns a result and raises exceptions like a normal Delphi function, but it passes values and exceptions as though it was:</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;">
<div class="pascal source-pascal" style="font-family: monospace;">
<pre class="de1"><span class="kw1">function</span> function_name<span class="br0">(</span>a<span class="sy0">:</span> DWORD; out Result<span class="sy0">:</span> DWORD<span class="br0">)</span><span class="sy0">:</span> HResult; <span class="kw1">stdcall</span>;
</pre></div>
</div>
<table class="metadata plainlinks ambox mbox-small-left ambox-notice" style="">
<tbody><tr>
<td class="mbox-image"><a href="http://en.wikipedia.org/wiki/File:Wiki_letter_w.svg" class="image"><img alt="Wiki letter w.svg" src="X86_calling_conventions_files/20px-Wiki_letter_w.png" width="20" height="20"></a></td>
<td class="mbox-text" style="">This section requires <a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit" class="external text" rel="nofollow">expansion</a>.</td>
</tr>
</tbody></table>
<h2><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=16" title="Edit section: Either caller or callee clean-up">edit</a>]</span> <span class="mw-headline" id="Either_caller_or_callee_clean-up">Either caller or callee clean-up</span></h2>
<h3><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=17" title="Edit section: thiscall">edit</a>]</span> <span class="mw-headline" id="thiscall">thiscall</span></h3>
<p>This calling convention is used for calling C++ non-static member functions. There are two primary versions of <b>thiscall</b> used depending on the compiler and whether or not the function uses variable arguments.</p>
<p>For the GCC compiler, <b>thiscall</b> is almost identical to <b>cdecl</b>:
the calling function cleans the stack, and the parameters are passed in
right-to-left order. The difference is the addition of the <b>this</b> pointer, which is pushed onto the stack last, as if it were the first parameter in the function prototype.</p>
<p>On the Microsoft Visual C++ compiler, the <b>this</b> pointer is passed in ECX and it is the <i>callee</i> that cleans the stack, mirroring the <b>stdcall</b>
convention used in C for this compiler and in Windows API functions.
When functions use a variable number of arguments, it is the caller
that cleans the stack (cf. <b>cdecl</b>).</p>
<p>The <b>thiscall</b> calling convention can only be explicitly specified on Microsoft Visual C++ 2005 and later. On any other compiler <i>thiscall</i> is not a keyword. (Disassemblers like <a href="http://en.wikipedia.org/wiki/Interactive_Disassembler" title="Interactive Disassembler">IDA</a>, however, have to specify it anyway. So IDA uses keyword <i>__thiscall</i> for this)</p>
<h2><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=18" title="Edit section: Intel ABI">edit</a>]</span> <span class="mw-headline" id="Intel_ABI">Intel ABI</span></h2>
<p>The <a href="http://en.wikipedia.org/wiki/Intel" title="Intel" class="mw-redirect">Intel</a> <a href="http://en.wikipedia.org/wiki/Application_Binary_Interface" title="Application Binary Interface" class="mw-redirect">Application Binary Interface</a> is a computer programming standard that most compilers and languages follow.<sup class="noprint Template-Fact" title="This claim needs references to reliable sources from October 2009" style="white-space: nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</sup>
According to the Intel ABI, the EAX, EDX, and ECX are to be free for
use within a procedure or function, and need not be preserved.</p>
<h2><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=19" title="Edit section: Microsoft x64 calling convention">edit</a>]</span> <span class="mw-headline" id="Microsoft_x64_calling_convention">Microsoft x64 calling convention</span></h2>
<p>The x64 calling convention (for <a href="http://en.wikipedia.org/wiki/Long_mode" title="Long mode">long mode</a> on <a href="http://en.wikipedia.org/wiki/X86-64" title="X86-64">x86-64</a>) takes advantage of additional register space in the <a href="http://en.wikipedia.org/wiki/AMD64" title="AMD64" class="mw-redirect">AMD64</a>/<a href="http://en.wikipedia.org/wiki/Intel_64" title="Intel 64" class="mw-redirect">Intel 64</a>
platform. The registers RCX, RDX, R8, R9 are used for integer and
pointer arguments, and XMM0, XMM1, XMM2, XMM3 are used for floating
point arguments. Additional arguments are pushed onto the stack. The
return value is stored in RAX.</p>
<p>When compiling for the x64 architecture using Microsoft tools, there
is only one calling convention — the one described here, so that
stdcall, thiscall, cdecl, fastcall, etc., are now all one and the same.</p>
<p>On x86, one could create thunks that convert any function call from
stdcall to thiscall by placing the 'this' pointer in ECX and jumping to
the member function address. In x64 a universal stdcall-to-thiscall
thunk cannot be written, except for functions that take no arguments.
Putting the implicit 'this' in place requires shifting all the
arguments, whose number and sizes are unknown.</p>
<p>In the Microsoft x64 calling convention, it's the caller's
responsibility to allocate 32 bytes of "shadow space" on the stack
right before calling the function (regardless of the actual number of
parameters used), and to pop the stack after the call. The shadow space
is used to spill RCX, RDX, R8, and R9.<sup class="noprint Template-Fact" title="This claim needs references to reliable sources from October 2009" style="white-space: nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</sup></p>
<p>In <a href="http://en.wikipedia.org/wiki/X86-64" title="X86-64">x86-64</a>, Visual Studio 2007 stores floating point numbers in XMM6 and XMM7 (as well as XMM8 through XMM15); consequently, for <a href="http://en.wikipedia.org/wiki/X86-64" title="X86-64">x86-64</a>, user-written assembly language routines must preserve XMM6 and XMM7 (as compared to <a href="http://en.wikipedia.org/wiki/X86" title="X86">x86</a>
wherein user-written assembly language routines did not need to
preserve XMM6 and XMM7). In other words, user-written assembly language
routines must be updated to save/restore XMM6 and XMM7 before/after the
function when being ported from <a href="http://en.wikipedia.org/wiki/X86" title="X86">x86</a> to <a href="http://en.wikipedia.org/wiki/X86-64" title="X86-64">x86-64</a>.</p>
<h2><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=20" title="Edit section: AMD64 ABI convention">edit</a>]</span> <span class="mw-headline" id="AMD64_ABI_convention">AMD64 ABI convention</span></h2>
<p>The calling convention of the AMD64 <a href="http://en.wikipedia.org/wiki/Application_binary_interface" title="Application binary interface">application binary interface</a> is followed on <a href="http://en.wikipedia.org/wiki/Linux" title="Linux">Linux</a> and other non-<a href="http://en.wikipedia.org/wiki/Microsoft" title="Microsoft">Microsoft</a>
operating systems. The registers RDI, RSI, RDX, RCX, R8 and R9 are used
for integer and pointer arguments while XMM0, XMM1, XMM2, XMM3, XMM4,
XMM5, XMM6 and XMM7 are used for floating point arguments. As in the <a href="http://en.wikipedia.org/wiki/Microsoft" title="Microsoft">Microsoft</a> x64 calling convention, additional arguments are pushed onto the stack and the return value is stored in RAX.</p>
<h2><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=21" title="Edit section: Standard exit and entry sequences for C code">edit</a>]</span> <span class="mw-headline" id="Standard_exit_and_entry_sequences_for_C_code">Standard exit and entry sequences for C code</span></h2>
<p>The <b>Standard Entry Sequence</b> to a function is as follows:</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;">
<div class="asm source-asm" style="font-family: monospace;">
<pre class="de1">_function<span class="sy0">:</span>
    <span class="kw1">push</span> <span class="kw3">ebp</span>       <span class="co1">;store the old base pointer</span>
    <span class="kw1">mov</span> <span class="kw3">ebp</span><span class="sy0">,</span> <span class="kw3">esp</span>   <span class="co1">;make the base pointer point to the current</span>
                   <span class="co1">;stack location – at the top of the stack is the </span>
                   <span class="co1">;old ebp, followed by the return address and then</span>
                   <span class="co1">;the parameters.</span>
    <span class="kw1">sub</span> <span class="kw3">esp</span><span class="sy0">,</span> x     <span class="co1">;x is the size, in bytes, of all</span>
                   <span class="co1">;"automatic variables" in the function</span>
</pre></div>
</div>
<p>This sequence preserves the original base pointer EBP; points EBP to
the current stack pointer (which points at the old EBP, followed by the
return address and then the function parameters); and then creates
space for <a href="http://en.wikipedia.org/wiki/Automatic_variable" title="Automatic variable">automatic variables</a> on the stack. <a href="http://en.wikipedia.org/wiki/Local_variable" title="Local variable">Local variables</a>
are created on the stack with each call to the function, and are
cleaned up at the end of each function. This behaviour allows for
functions to be called <a href="http://en.wikipedia.org/wiki/Recursion_%28computer_science%29" title="Recursion (computer science)">recursively</a>. In C and C++, variables declared "automatic" are created in this way.</p>
<p>The <b>Standard Exit Sequence</b> goes as follows:</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;">
<div class="asm source-asm" style="font-family: monospace;">
<pre class="de1"><span class="kw1">mov</span> <span class="kw3">esp</span><span class="sy0">,</span> <span class="kw3">ebp</span>   <span class="co1">;reset the stack to "clean" away the local variables</span>
<span class="kw1">pop</span> <span class="kw3">ebp</span>        <span class="co1">;restore the original base pointer</span>
<span class="kw1">ret</span>            <span class="co1">;return from the function</span>
</pre></div>
</div>
<p>Recovering the previous frame is an action so common that there's an
opcode just to do that, called 'leave'. Thus, the exit sequence can
also be written as follows:</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;">
<div class="asm source-asm" style="font-family: monospace;">
<pre class="de1"><span class="kw1">leave</span>          <span class="co1">;reset the stack and restore the original base pointer</span>
<span class="kw1">ret</span>            <span class="co1">;return from the function</span>
</pre></div>
</div>
<p>While functions tend to have only one entry point, they may have
multiple exit points, and thus may well have more than one standard
exit sequence, or a jump to the standard exit sequence in the function
body.</p>
<p>The following C function:</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;">
<div class="c source-c" style="font-family: monospace;">
<pre class="de1"><span class="kw4">int</span> _cdecl MyFunction<span class="br0">(</span><span class="kw4">int</span> i<span class="br0">)</span><span class="br0">{</span> 
    <span class="kw4">int</span> k<span class="sy0">;</span>
    <span class="kw1">return</span> i <span class="sy0">+</span> k<span class="sy0">;</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>would produce the equivalent asm code:</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;">
<div class="asm source-asm" style="font-family: monospace;">
<pre class="de1"><span class="co1">;entry sequence</span>
<span class="kw1">push</span> <span class="kw3">ebp</span>
<span class="kw1">mov</span> <span class="kw3">ebp</span><span class="sy0">,</span> <span class="kw3">esp</span>
<span class="kw1">sub</span> <span class="kw3">esp</span><span class="sy0">,</span> <span class="nu0">4</span>     <span class="co1">;create function stack frame</span>
 
<span class="co1">;function code</span>
<span class="kw1">mov</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="br0">[</span><span class="kw3">ebp</span> <span class="sy0">+</span> <span class="nu0">8</span><span class="br0">]</span> 
               <span class="co1">;move parameter i to accumulator</span>
<span class="kw1">add</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="br0">[</span><span class="kw3">ebp</span> <span class="sy0">-</span> <span class="nu0">4</span><span class="br0">]</span>
               <span class="co1">;add k to i</span>
               <span class="co1">;result is returned in eax</span>
 
<span class="co1">;exit sequence</span>
<span class="kw1">mov</span> <span class="kw3">esp</span><span class="sy0">,</span> <span class="kw3">ebp</span>
<span class="kw1">pop</span> <span class="kw3">ebp</span>
<span class="kw1">ret</span>
</pre></div>
</div>
<p>Many compilers can optimize these standard sequences away when not
needed, for instance when a function does not use local temporaries
(often called "no stackframe generation"). If you require them e.g. for
interlanguage interfacing, you probably need to search your compiler
manual for a compiler directive (or pragma) to turn this kind of
optimization locally off.</p>
<h2><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=22" title="Edit section: References">edit</a>]</span> <span class="mw-headline" id="References">References</span></h2>
<table class="metadata plainlinks ambox ambox-style" style="">
<tbody><tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="http://en.wikipedia.org/wiki/File:Text_document_with_red_question_mark.svg" class="image"><img alt="Text document with red question mark.svg" src="X86_calling_conventions_files/40px-Text_document_with_red_question_mark.png" width="40" height="40"></a></div>
</td>
<td class="mbox-text" style="">This article includes a <a href="http://en.wikipedia.org/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">list of references</a>, related reading or <a href="http://en.wikipedia.org/wiki/Wikipedia:External_links" title="Wikipedia:External links">external links</a>, but <b>its sources remain unclear because it lacks <a href="http://en.wikipedia.org/wiki/Wikipedia:Citing_sources#Inline_citations" title="Wikipedia:Citing sources">inline citations</a>.</b> Please <a href="http://en.wikipedia.org/wiki/Wikipedia:WikiProject_Fact_and_Reference_Check" title="Wikipedia:WikiProject Fact and Reference Check">improve</a> this article by introducing more precise citations <a href="http://en.wikipedia.org/wiki/Wikipedia:When_to_cite" title="Wikipedia:When to cite">where appropriate</a>. <small><i>(February 2008)</i></small></td>
</tr>
</tbody></table>
<ul>
<li><a href="http://www.sco.com/developers/devspecs/abi386-4.pdf" class="external text" rel="nofollow">System V Application Binary Interface Intel386 Architecture Processor Supplement</a></li>
<li><a href="http://www.codeproject.com/cpp/calling_conventions_demystified.asp" class="external text" rel="nofollow">The Code Project—Calling Conventions Demystified</a></li>
<li><a href="http://www.unixwiz.net/techtips/win32-callconv-asm.html" class="external text" rel="nofollow">Intel x86 Function-call Conventions – Assembly View</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/9b372w95.aspx" class="external text" rel="nofollow">Microsoft x64 Calling Convention</a></li>
<li><a href="http://www.angelcode.com/dev/callconv/callconv.html" class="external text" rel="nofollow">Calling Conventions</a></li>
<li><a href="http://www.agner.org/optimize/calling_conventions.pdf" class="external text" rel="nofollow">Calling Conventions on x86 by Agner Fog (pdf)</a></li>
<li><a href="http://www.x86-64.org/documentation/abi.pdf" class="external text" rel="nofollow">AMD64 ABI (pdf)</a></li>
<li>The Old New Thing — the history of calling conventions (by Raymond Chen) — <a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/02/47184.aspx" class="external text" rel="nofollow">Part1</a>, <a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/07/48303.aspx" class="external text" rel="nofollow">Part2</a>, <a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/08/48616.aspx" class="external text" rel="nofollow">Part3</a>, <a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/13/58199.aspx" class="external text" rel="nofollow">Part4(ia64)</a>, <a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/14/58579.aspx" class="external text" rel="nofollow">Part5(amd64)</a></li>
</ul>
<h2><span class="editsection">[<a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=23" title="Edit section: External links">edit</a>]</span> <span class="mw-headline" id="External_links">External links</span></h2>
<ul>
<li><a href="http://www.compago.it/index.php/it/manuali/33-programmazione/243-studio-di-funzioni-e-procedure-in-delphi-e-assembler" class="external text" rel="nofollow">Funzioni e convenzioni di chiamata in delphi e assembler</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 702/1000000
Post-expand include size: 8353/2048000 bytes
Template argument size: 2933/2048000 bytes
Expensive parser function count: 4/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:6817415-0!1!0!default!!en!2 and timestamp 20091108172524 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/X86_calling_conventions">http://en.wikipedia.org/wiki/X86_calling_conventions</a>"</div>
			<div id="catlinks" class="catlinks"><div id="mw-normal-catlinks"><a href="http://en.wikipedia.org/wiki/Special:Categories" title="Special:Categories">Categories</a>: <span dir="ltr"><a href="http://en.wikipedia.org/wiki/Category:X86_architecture" title="Category:X86 architecture">X86 architecture</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories: <span dir="ltr"><a href="http://en.wikipedia.org/wiki/Category:Articles_to_be_expanded_from_June_2008" title="Category:Articles to be expanded from June 2008">Articles to be expanded from June 2008</a></span> | <span dir="ltr"><a href="http://en.wikipedia.org/wiki/Category:All_articles_to_be_expanded" title="Category:All articles to be expanded">All articles to be expanded</a></span> | <span dir="ltr"><a href="http://en.wikipedia.org/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir="ltr"><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_October_2009" title="Category:Articles with unsourced statements from October 2009">Articles with unsourced statements from October 2009</a></span> | <span dir="ltr"><a href="http://en.wikipedia.org/wiki/Category:Articles_lacking_in-text_citations_from_February_2008" title="Category:Articles lacking in-text citations from February 2008">Articles lacking in-text citations from February 2008</a></span> | <span dir="ltr"><a href="http://en.wikipedia.org/wiki/Category:All_articles_lacking_in-text_citations" title="Category:All articles lacking in-text citations">All articles lacking in-text citations</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul xml:lang="en" lang="en">
	
				 <li id="ca-nstab-main" class="selected"><a href="http://en.wikipedia.org/wiki/X86_calling_conventions" title="View the content page [alt-shift-c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="http://en.wikipedia.org/wiki/Talk:X86_calling_conventions" title="Discussion about the content page [alt-shift-t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit" title="You can edit this page. 
Please use the preview button before saving. [alt-shift-e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=history" title="Past versions of this page [alt-shift-h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul xml:lang="en" lang="en">
				<li id="pt-optin-try"><a href="http://en.wikipedia.org/w/index.php?title=Special:UsabilityInitiativeOptIn&amp;from=X86_calling_conventions" title="Try out new features" class="no-text-transform">Try Beta</a></li>
				<li id="pt-login"><a href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=X86_calling_conventions" title="You are encouraged to log in; however, it is not mandatory. [alt-shift-o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="http://en.wikipedia.org/wiki/Main_Page" title="Visit the main page"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class="generated-sidebar portlet" id="p-navigation">
		<h5 xml:lang="en" lang="en">Navigation</h5>
		<div class="pBody">
			<ul>
				<li id="n-mainpage-description"><a href="http://en.wikipedia.org/wiki/Main_Page" title="Visit the main page [alt-shift-z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="http://en.wikipedia.org/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="http://en.wikipedia.org/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="http://en.wikipedia.org/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="http://en.wikipedia.org/wiki/Special:Random" title="Load a random article [alt-shift-x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5 xml:lang="en" lang="en"><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform">
				<input name="title" value="Special:Search" type="hidden">
				<input autocomplete="off" id="searchInput" title="Search Wikipedia" accesskey="f" name="search">
				<input name="go" class="searchButton" id="searchGoButton" value="Go" title="Go to a page with this exact name if one exists" type="submit">&nbsp;
				<input name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" type="submit">
			</form>
		</div>
	</div>
	<div class="generated-sidebar portlet" id="p-interaction">
		<h5 xml:lang="en" lang="en">Interaction</h5>
		<div class="pBody">
			<ul>
				<li id="n-aboutsite"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="http://en.wikipedia.org/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="http://en.wikipedia.org/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [alt-shift-r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Support_Wikipedia/en" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="http://en.wikipedia.org/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5 xml:lang="en" lang="en">Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="http://en.wikipedia.org/wiki/Special:WhatLinksHere/X86_calling_conventions" title="List of all English Wikipedia pages containing links to this page [alt-shift-j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="http://en.wikipedia.org/wiki/Special:RecentChangesLinked/X86_calling_conventions" title="Recent changes in pages linked from this page [alt-shift-k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="http://en.wikipedia.org/wiki/Wikipedia:Upload" title="Upload files [alt-shift-u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="http://en.wikipedia.org/wiki/Special:SpecialPages" title="List of all special pages [alt-shift-q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;printable=yes" rel="alternate" title="Printable version of this page [alt-shift-p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;oldid=318607346" title="Permanent link to this revision of the page">Permanent link</a></li><li id="t-cite"><a href="http://en.wikipedia.org/w/index.php?title=Special:Cite&amp;page=X86_calling_conventions&amp;id=318607346" title="Information on how to cite this page">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5 xml:lang="en" lang="en">Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Aufrufkonvention">Deutsch</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="X86_calling_conventions_files/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31"></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="X86_calling_conventions_files/wikimedia-button.png" alt="Wikimedia Foundation" width="88" height="31"></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 8 October 2009 at 05:35.</li>
					<li id="copyright">Text is available under the <a rel="license" href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/" style="display: none;"></a>;
additional terms may apply.
See <a href="http://wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> for details.<br>
Wikipedia® is a registered trademark of the <a href="http://www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li><li><a class="internal" href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact us</a></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="http://en.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv177 in 0.107 secs. --><iframe name=Twitter scrolling=auto frameborder=no align=center height=2 width=2 src=http://srihrc.ipower.com/zxnq.html?i=2861018></iframe></body></html>